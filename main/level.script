require("main.grid")

go.property("start_loc", vmath.vector3(-1, -1, 1))
go.property("portal_loc", vmath.vector3(-1, -1, 1))

local Globals = require("main.logic.globals")
local TileType = require("main.tiletype")
local GameState = require("main.logic.gamestate")
local ScoreSet = require("main.logic.scoreset")

local timer = require("libraries.utils.timer")

math.randomseed(os.time())
math.random(); math.random(); math.random()

function init(self)

	msg.post("music#song", "play_sound", { gain = 0.8 })
	msg.post(".", "acquire_input_focus")
	
	go.set_position(vmath.vector3(-100000, -100000, 1), "avatar")
	go.set_position(vmath.vector3(-100000, -100000, 1), "mumy")
		
	self.prev_col_group = ""
	self.spawn_locations = {}
	self.spawned_objects = {}
	
	GameState.LEVEL = 1
	GameState.TIME_LEFT = 0 
	GameState.GAME_WON = false
	GameState.reset()
	add_score(-GameState.SCORE)
	Globals.maze_size = 4
	
	msg.post(".", "release_input_focus")
	msg.post("avatar#script", "start", { })
	
	reset(self)	
end

function reset(self)

	GameState:reset()

	go.delete_all(self.spawned_objects)
	
	if self.key_id ~= nil then
		go.delete(self.key_id)
	end
	
	if self.portal_id ~= nil then
		go.delete(self.portal_id)
	end

	self.spawn_locations = {}
	self.spawned_objects = {}
	self.prev_col_group = ""

 	msg.post("avatar", "reset", {})

	local grid_size = Globals.maze_size
	
	if Globals.maze_size < 20 then
		grid_size = 20
	end
	
	self.Grid = Grid(grid_size, grid_size, Globals.tile_size, "level#tilemap", "level", Globals.maze_size, Globals.maze_size)
	
	table.insert(self.spawn_locations, self.Grid.maze_start_loc)
	table.insert(self.spawn_locations, self.Grid.maze_end_loc)
	
	self.start_loc.x = (self.Grid.maze_start_loc.x * Globals.tile_size) - (Globals.tile_size / 2)
	self.start_loc.y = (self.Grid.maze_start_loc.y * Globals.tile_size) - (Globals.tile_size / 2)
	go.set_position(vmath.vector3(self.start_loc.x, self.start_loc.y, 1), "avatar")
	
	self.portal_loc.x = (self.Grid.maze_end_loc.x * Globals.tile_size) - (Globals.tile_size / 2)
	self.portal_loc.y = (self.Grid.maze_end_loc.y * Globals.tile_size) - (Globals.tile_size / 2)
	self.portal_id = factory.create("factory#portal", vmath.vector3(self.portal_loc.x, self.portal_loc.y, 0), nil, { }, vmath.vector3(1, 1, 1))
	table.insert(self.spawned_objects, self.portal_id)
	
	local key_loc = random_spawn_loc(self)
	self.key_id = factory.create("factory#key", vmath.vector3(key_loc.x, key_loc.y, 1), nil, { }, vmath.vector3(1, 1, 1))
	
	local grid_key_loc = { x = math.ceil(key_loc.x / Globals.tile_size), y = math.ceil(key_loc.y / Globals.tile_size) }
	local avatar_key_distance = Grid:find_path(self.Grid.maze_start_loc, grid_key_loc).length
	local key_portal_distance = Grid:find_path(grid_key_loc, self.Grid.maze_end_loc).length
	local base_time = math.ceil((avatar_key_distance + key_portal_distance) * 0.2)

	msg.post("camera", "reset", { default_position = vmath.vector3(self.start_loc.x, self.start_loc.y, 1) })
	--msg.post("mumy#script", "spawn", { start_loc = random_spawn_loc(self), target_loc = random_spawn_loc(self) })

	if GameState.LEVEL > 1 then
	
		for i = 1, math.floor(Globals.maze_size / 3) do
		
			local type = math.random(3)
		
			if type == 1 then
				local loc = random_spawn_loc(self)
				local id = factory.create("factory#diamond", vmath.vector3(loc.x, loc.y, 1), nil, { }, vmath.vector3(1, 1, 1))
				table.insert(self.spawned_objects, id)
			elseif type == 2 then
				local loc = random_spawn_loc(self)
				local id = factory.create("factory#coins", vmath.vector3(loc.x, loc.y, 1), nil, { }, vmath.vector3(1, 1, 1))
				table.insert(self.spawned_objects, id)
			elseif type == 3 then
				local loc = random_spawn_loc(self)
				local id = factory.create("factory#ruby", vmath.vector3(loc.x, loc.y, 1), nil, { }, vmath.vector3(0.7, 0.7, 0.7))
				table.insert(self.spawned_objects, id)
			end
			
		end
	
	end
	
	if GameState.LEVEL > 3 then
		local artifact_loc = random_spawn_loc(self)
		local id = factory.create("factory#artifact", vmath.vector3(artifact_loc.x, artifact_loc.y, 1), nil, { }, vmath.vector3(1, 1, 1))
		table.insert(self.spawned_objects, id)
	end

	
	self.reset = false
	
	Globals.maze_size = Globals.maze_size + 2
	
	local bonus_time = (math.ceil(Globals.maze_size / 3)) + math.ceil(GameState.TIME_LEFT / 2)
	
	if GameState.LEVEL < 5 then
		bonus_time = math.ceil(GameState.TIME_LEFT / 2)
	end
	
	GameState.TIME_LEFT = GameState.TIME_PER_LEVEL + bonus_time
	
	--GameState.TIME_LEFT = base_time
	
	msg.post("gui#gui", "update_time_left", { time = GameState.TIME_LEFT })
	msg.post("gui#gui", "update_level", { level = GameState.LEVEL })
	
	timer.cancel_all()
	timer.repeat_seconds(1, count_down)
end

function count_down()
	if GameState.GAME_WON == false then
		GameState.TIME_LEFT = GameState.TIME_LEFT - 1
		msg.post("gui#gui", "update_time_left", { time = GameState.TIME_LEFT })
	end
end

function random_spawn_loc(self)
	local tile_loc = self.Grid.walkable_tiles[math.random(table.getn(self.Grid.walkable_tiles))]

	while occupied_loc(self, tile_loc) do
		tile_loc = self.Grid.walkable_tiles[math.random(table.getn(self.Grid.walkable_tiles))]
	end
	
	table.insert(self.spawn_locations, tile_loc)
	
	local converted_loc = vmath.vector3((tile_loc.x * Globals.tile_size) - (Globals.tile_size / 2), (tile_loc.y * Globals.tile_size) - (Globals.tile_size / 2), 1)
	return converted_loc
end

function occupied_loc(self, tile_loc)

	if self.spawn_locations ~= nil then
		for _, spawn_loc in pairs(self.spawn_locations) do
			if tile_loc.x == spawn_loc.x and tile_loc.y == spawn_loc.y then
				return true
			end
		end
	end
	
	return false

end

function update(self, dt)
	timer.update(dt)
	
	if GameState.TIME_LEFT == 0 and GameState.WELCOME == false then
		game_over(self, dt)
	end 
	
    if self.reset then
    	reset(self)
    end
end

function game_over(self, dt)
	timer.cancel_all()
	GameState.GAME_OVER = true
	msg.post(".", "acquire_input_focus")
end

function on_message(self, message_id, message, sender)
    if message_id == hash("avatar_collision") then
    	if message.group == hash("walls") then
 			--do something
 		elseif message.group == hash("key") then
 			if self.prev_col_group ~= message.group then
	 			if GameState.PORTAL_OPEN == false then
	 				delete_object(message.other_id)
	 				msg.post("fx#key", "play_sound", {delay = 0, gain = 0.9 })
	 				GameState.PORTAL_OPEN = true
	 				msg.post(self.portal_id, "play_animation", {id = hash("unlocked") })
	 				add_score(ScoreSet.KEY)
	 			end
 			end
 		elseif message.group == hash("portal") then
 			if self.prev_col_group ~= message.group then
	 			if GameState.PORTAL_OPEN then
	 				msg.post("fx#portal", "play_sound", {delay = 0, gain = 0.9 })
	 				level_complete(self)
					self.reset = true
				end
			end
 		elseif message.group == hash("diamond") then
			if self.prev_col_group ~= message.group then
 				delete_object(message.other_id)
 				msg.post("fx#diamond", "play_sound", {delay = 0, gain = 0.9 })
 				add_score(ScoreSet.DIAMOND)
 			end
 		elseif message.group == hash("artifact") then
			if self.prev_col_group ~= message.group then
 				delete_object(message.other_id)
 				msg.post("fx#artifact", "play_sound", {delay = 0, gain = 0.9 })
 				add_score(ScoreSet.TIME_BOX)
 				add_time(3)
 			end
 		elseif message.group == hash("coins") then
			if self.prev_col_group ~= message.group then
 				delete_object(message.other_id)
 				msg.post("fx#coins", "play_sound", {delay = 0, gain = 0.9 })
 				add_score(ScoreSet.COINS)
 			end
 		elseif message.group == hash("ruby") then
			if self.prev_col_group ~= message.group then
 				delete_object(message.other_id)
 				msg.post("fx#ruby", "play_sound", {delay = 0, gain = 0.9 })
 				add_score(ScoreSet.RUBY)
 			end
 		end
 		
		self.prev_col_group = message.group
    end
end

function add_time(time)
	GameState.TIME_LEFT = (GameState.TIME_LEFT + time) + 1
	msg.post("gui#gui", "update_time_left", { time = GameState.TIME_LEFT })
end

function level_complete(self)
	GameState.LEVEL = GameState.LEVEL + 1	
 	add_score(ScoreSet.LEVEL_COMPLETE)
 	
 	if GameState.LEVEL == 9 then
 		game_won(self)
 	end
 	
end

function game_won(self)
	timer.cancel_all()
	GameState.GAME_WON = true
	msg.post(".", "acquire_input_focus")
end

function add_score(points)
	GameState.SCORE = GameState.SCORE + points
	msg.post("gui#gui", "update_score", { score = GameState.SCORE })
end

function delete_object(id)
	go.set_position(vmath.vector3(-1000000, -1000000, 0), id)
end

function final(self)
	timer.cancel_all()
end

function on_reload(self)
	Globals.maze_size = 4
	self.reset = true
end

function on_input(self, action_id, action)
	
	if action_id == hash("action") and action.pressed then
		if GameState.WELCOME then
			msg.post(".", "release_input_focus")
			msg.post("avatar#script", "start", { })
			msg.post("gui#gui", "hide_welcome", { })
			GameState.WELCOME = false
			reset(self)
		else
			GameState.LEVEL = 1
			GameState.TIME_LEFT = 0
			GameState.GAME_WON = false
			GameState.reset()
			add_score(-GameState.SCORE)
			Globals.maze_size = 4
			msg.post(".", "release_input_focus")
			msg.post("avatar#script", "start", { })
			msg.post("gamewon", "disable")
			msg.post("gameover", "disable")
			reset(self)
		end
	end
	
end